{
    "title": "unable to decode stream java.io.FileNotFoundException /storage/emulated/0 open failed:ENOENT(No such file or directory",
    "viewCount": 30786,
    "answerCount": 5,
    "commentCount": 0,
    "lastActivityDate": "2017-03-01 21:23:03",
    "body": "<p>hello i'm trying to save pictures taken on my application, but when i try to access the memory to place the data, an error comes out</p>&#xA;&#xA;<p>unable to decode stream java.io.FileNotFoundException /storage/emulated/0 open failed:ENOENT(No such file or directory)</p>&#xA;&#xA;<p>this is my code.</p>&#xA;&#xA;<pre><code>            Camera.PictureCallback mPictureCallback = new Camera.PictureCallback() {&#xA;&#xA;        public void onPictureTaken(byte[] data, Camera camera) {&#xA;            // TODO Auto-generated method stub&#xA;            if (data != null){&#xA;                //Intent mIntent = new Intent();&#xA;                //mIntent.putExtra(\"image\",imageData);&#xA;&#xA;                mCamera.stopPreview();&#xA;                mPreviewRunning = false;&#xA;                mCamera.release();&#xA;&#xA;                 try{&#xA;                     BitmapFactory.Options opts = new BitmapFactory.Options();&#xA;                     Bitmap bitmap= BitmapFactory.decodeByteArray(data, 0, data.length,opts);&#xA;                     bitmap = Bitmap.createScaledBitmap(bitmap, 300, 300, false);&#xA;                     int width = bitmap.getWidth();&#xA;                     int height = bitmap.getHeight();&#xA;                     int newWidth = 300;&#xA;                     int newHeight = 300;&#xA;&#xA;                     // calculate the scale - in this case = 0.4f&#xA;                     float scaleWidth = ((float) newWidth) / width;&#xA;                     float scaleHeight = ((float) newHeight) / height;&#xA;&#xA;                     // createa matrix for the manipulation&#xA;                     Matrix matrix = new Matrix();&#xA;                     // resize the bit map&#xA;                     matrix.postScale(scaleWidth, scaleHeight);&#xA;                     // rotate the Bitmap&#xA;                     matrix.postRotate(-90);&#xA;                     Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0,&#xA;                             width, height, matrix, true);&#xA;                     Camera_local_db.image.setImageBitmap(resizedBitmap);&#xA;&#xA;                 }catch(Exception e){&#xA;                     e.printStackTrace();&#xA;                 }&#xA;               // StoreByteImage(mContext, imageData, 50,\"ImageName\");&#xA;                //setResult(FOTO_MODE, mIntent);&#xA;                setResult(585);&#xA;                finish();&#xA;            }       &#xA;        }&#xA;    };&#xA;&#xA;&#xA;    Camera.PictureCallback jpegCallback = new Camera. PictureCallback() {&#xA;    @Override&#xA;    public void onPictureTaken(byte[] data, Camera camera) {&#xA;&#xA;&#xA;        File dir_image2 = new  File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM),\"dddd.jpg\");&#xA;        dir_image2.mkdirs();  //AGAIN CHOOSING FOLDER FOR THE PICTURE(WHICH IS LIKE A SURFACEVIEW &#xA;                                //SCREENSHOT)&#xA;        if (!dir_image2.mkdirs()) {&#xA;            Log.e(TAG, \"Directory not created\");&#xA;        }&#xA;&#xA;&#xA;        File tmpFile = new File(dir_image2,\"TempGhost.jpg\"); //MAKING A FILE IN THE PATH                 &#xA;                        //dir_image2(SEE RIGHT ABOVE) AND NAMING IT \"TempGhost.jpg\" OR ANYTHING ELSE&#xA;        try {//SAVING&#xA;            FileOutputStream fos = new FileOutputStream(tmpFile);&#xA;            fos.write(data);&#xA;            fos.close();&#xA;            //grabImage();&#xA;        } catch (FileNotFoundException e) {&#xA;            Toast.makeText(getApplicationContext(),\"Error\",Toast.LENGTH_LONG).show();&#xA;        } catch (IOException e) {&#xA;            Toast.makeText(getApplicationContext(),\"Error\",Toast.LENGTH_LONG).show();&#xA;        }&#xA;        //String path = Environment.getExternalStoragePublicDirectory(    Environment.DIRECTORY_MOVIES); File file = new File(path, \"/\" + dir_image2);&#xA;        //String path = (Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM)+  &#xA;          //      File.separator+\"TempGhost.jpg\");//&lt;---&#xA;&#xA;        BitmapFactory.Options options = new BitmapFactory.Options();//&lt;---&#xA;        options.inPreferredConfig = Bitmap.Config.ARGB_8888;//&lt;---&#xA;        bmp1 = BitmapFactory.decodeFile(tmpFile.toString(), options);//&lt;---&#xA;        //THE LINES ABOVE READ THE FILE WE SAVED BEFORE AND CONVERT IT INTO A BitMap&#xA;        Camera_local_db.image.setImageBitmap(bmp1);&#xA;        //camera_image.setImageBitmap(bmp1); //SETTING THE BitMap AS IMAGE IN AN IMAGEVIEW(SOMETHING&#xA;                                    //LIKE A BACKGROUNG FOR THE LAYOUT)&#xA;       // TakeScreenshot();//CALLING THIS METHOD TO TAKE A SCREENSHOT&#xA;&#xA;    }&#xA;    };&#xA;</code></pre>&#xA;",
    "postTypeId": 1,
    "acceptedAnswerId": 0,
    "postLink": {
        "NumOfLink": 2,
        "linkId": [
            26460842,
            47635516
        ]
    },
    "answers": {
        "25467200": {
            "body": "<p>You need to write to external storage, make sure you added the permission:</p>&#xA;&#xA;<pre><code>&lt;manifest ...&gt;&#xA;    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;&#xA;    ...&#xA;&lt;/manifest&gt;&#xA;</code></pre>&#xA;&#xA;<p>Checks if external storage is available for read and write:</p>&#xA;&#xA;<pre><code>public boolean isExternalStorageWritable() {&#xA;    String state = Environment.getExternalStorageState();&#xA;    if (Environment.MEDIA_MOUNTED.equals(state)) {&#xA;        return true;&#xA;    }&#xA;    return false;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Use the root of the public directory instead of using the root of Android.</p>&#xA;&#xA;<p>If you want to save public files on the external storage, use the getExternalStoragePublicDirectory()</p>&#xA;&#xA;<pre><code>public File getAlbumStorageDir(String albumName) {&#xA;    // Get the directory for the user's public pictures directory. &#xA;    File file = new File(Environment.getExternalStoragePublicDirectory(&#xA;            Environment.DIRECTORY_DCIM), albumName);&#xA;    if (!file.mkdirs()) {&#xA;        Log.e(LOG_TAG, \"Directory not created\");&#xA;    }&#xA;    return file;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you want to save files that are private to your app, use the getExternalFilesDir()</p>&#xA;&#xA;<pre><code>public File getAlbumStorageDir(Context context, String albumName) {&#xA;    // Get the directory for the app's private pictures directory. &#xA;    File file = new File(context.getExternalFilesDir(&#xA;            Environment.DIRECTORY_DCIM), albumName);&#xA;    if (!file.mkdirs()) {&#xA;        Log.e(LOG_TAG, \"Directory not created\");&#xA;    }&#xA;    return file;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>More information on the link <a href=\"http://developer.android.com/training/basics/data-storage/files.html\">http://developer.android.com/training/basics/data-storage/files.html</a></p>&#xA;",
            "snippets": [
                "public boolean isExternalStorageWritable() {&#xA;    String state = Environment.getExternalStorageState();&#xA;    if (Environment.MEDIA_MOUNTED.equals(state)) {&#xA;        return true;&#xA;    }&#xA;    return false;&#xA;}&#xA;",
                "public File getAlbumStorageDir(Context context, String albumName) {&#xA;    // Get the directory for the app's private pictures directory. &#xA;    File file = new File(context.getExternalFilesDir(&#xA;            Environment.DIRECTORY_DCIM), albumName);&#xA;    if (!file.mkdirs()) {&#xA;        Log.e(LOG_TAG, \"Directory not created\");&#xA;    }&#xA;    return file;&#xA;}&#xA;",
                "&lt;manifest ...&gt;&#xA;    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;&#xA;    ...&#xA;&lt;/manifest&gt;&#xA;",
                "public File getAlbumStorageDir(String albumName) {&#xA;    // Get the directory for the user's public pictures directory. &#xA;    File file = new File(Environment.getExternalStoragePublicDirectory(&#xA;            Environment.DIRECTORY_DCIM), albumName);&#xA;    if (!file.mkdirs()) {&#xA;        Log.e(LOG_TAG, \"Directory not created\");&#xA;    }&#xA;    return file;&#xA;}&#xA;"
            ],
            "gh_repos": [],
            "docs": [
                "http://developer.android.com/training/basics/data-storage/files.html"
            ]
        },
        "28269633": {
            "body": "<p>I had the same error, and the only problem was the permission in android manifest.</p>&#xA;&#xA;<pre><code>&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;&#xA;&#xA;&#xA;&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;&#xA;</code></pre>&#xA;",
            "snippets": [
                "&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;&#xA;&#xA;&#xA;&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;&#xA;"
            ],
            "gh_repos": [],
            "docs": []
        },
        "25467161": {
            "body": "<p>First, you are writing the image to a different location than you are reading it from. Rather than rebuild <code>path</code>, use the <code>tmpFile</code> value that you already have.</p>&#xA;&#xA;<p>Second, do not use <code>getRootDirectory()</code> to get the <code>DCIM</code> directory. Use <code>getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM)</code>.</p>&#xA;&#xA;<p>Third, use <code>Log</code> methods to log exceptions, rather than just display a <code>Toast</code>, as you may miss the <code>Toast</code> and you do not get the stack trace associated with your exception.</p>&#xA;",
            "snippets": [],
            "gh_repos": [],
            "docs": []
        },
        "39307669": {
            "body": "<p>I solved using this:</p>&#xA;&#xA;<pre><code>private static final int WRITE_PERMISSION = 0x01;&#xA;&#xA;@Override&#xA;protected void onCreate(Bundle savedInstanceState) {&#xA;    super.onCreate(savedInstanceState);&#xA;    setContentView(R.layout.activity_main);&#xA;    requestWritePermission();&#xA;}&#xA;&#xA;@Override&#xA;public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {&#xA;    if(requestCode == WRITE_PERMISSION){&#xA;        if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#xA;            Log.d(LOG_TAG, \"Write Permission Failed\");&#xA;            Toast.makeText(this, \"You must allow permission write external storage to your mobile device.\", Toast.LENGTH_SHORT).show();&#xA;            finish();&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;private void requestWritePermission(){&#xA;    if(checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)!=PackageManager.PERMISSION_GRANTED){&#xA;        ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},WRITE_PERMISSION);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;",
            "snippets": [
                "private static final int WRITE_PERMISSION = 0x01;&#xA;&#xA;@Override&#xA;protected void onCreate(Bundle savedInstanceState) {&#xA;    super.onCreate(savedInstanceState);&#xA;    setContentView(R.layout.activity_main);&#xA;    requestWritePermission();&#xA;}&#xA;&#xA;@Override&#xA;public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {&#xA;    if(requestCode == WRITE_PERMISSION){&#xA;        if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#xA;            Log.d(LOG_TAG, \"Write Permission Failed\");&#xA;            Toast.makeText(this, \"You must allow permission write external storage to your mobile device.\", Toast.LENGTH_SHORT).show();&#xA;            finish();&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;private void requestWritePermission(){&#xA;    if(checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)!=PackageManager.PERMISSION_GRANTED){&#xA;        ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},WRITE_PERMISSION);&#xA;    }&#xA;}&#xA;"
            ],
            "gh_repos": [],
            "docs": []
        },
        "42542306": {
            "body": "<p>Add this permission in Android Manifest.</p>&#xA;&#xA;<pre><code>&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;&#xA;</code></pre>&#xA;&#xA;<p>If it fails with this permission is present already, then you need to check your app's target SDK level. If it is targetSdkVersion => 23, then you need to request permissions at Run Time.&#xA;<a href=\"https://developer.android.com/training/permissions/requesting.html#perm-check\" rel=\"nofollow noreferrer\">Here</a></p>&#xA;",
            "snippets": [
                "&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;&#xA;"
            ],
            "gh_repos": [],
            "docs": [
                "https://developer.android.com/training/permissions/requesting.html#perm-check"
            ]
        }
    },
    "comments": {},
    "referenceGH": []
}